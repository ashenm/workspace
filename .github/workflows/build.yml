name: Build Image

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - ".github/workflows/build.yml"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    branches:
      - master

jobs:
  metadata:
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - id: git
        run: echo "build_commit_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
      - id: flavours
        run: |
          WORKSPACE_BUILD_FLAVOURS=$(printf '%s\0' src/* | jq \
            --raw-input \
            --compact-output \
            --null-input 'inputs | split("\u0000") | map(. | sub("^src/"; ""))')
          WORKSPACE_BUILD_FORKS=$(jq --compact-output 'map(select(. != "latest"))' <<< $WORKSPACE_BUILD_FLAVOURS)
          jq <<< $WORKSPACE_BUILD_FLAVOURS
          echo "build_flavours=${WORKSPACE_BUILD_FLAVOURS}" >> "$GITHUB_OUTPUT"
          jq <<< $WORKSPACE_BUILD_FORKS
          echo "build_forks=${WORKSPACE_BUILD_FORKS}" >> "$GITHUB_OUTPUT"
      - id: platforms
        run: |
          WORKSPACE_BUILD_PLATFORMS="[\"linux/amd64\", \"linux/arm64\"]"
          jq <<< $WORKSPACE_BUILD_PLATFORMS
          echo "build_platforms=${WORKSPACE_BUILD_PLATFORMS}" >> "$GITHUB_OUTPUT"
    outputs:
      build_commit_sha: ${{ steps.git.outputs.build_commit_sha }}
      build_flavours: ${{ steps.flavours.outputs.build_flavours }}
      build_forks: ${{ steps.flavours.outputs.build_forks }}
      build_platforms: ${{ steps.platforms.outputs.build_platforms }}
    runs-on: ubuntu-latest

  latest:
    needs:
      - metadata
    if: ${{ !startsWith(github.event.head_commit.message, '[Skip CI]') }}
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.metadata.outputs.build_platforms) }}
    steps:
      - run: |
          DOCKER_IMAGE_TARGET_PLATFORM=${{ matrix.platform }}
          echo "DOCKER_IMAGE_TARGET_PLATFORM=${DOCKER_IMAGE_TARGET_PLATFORM//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      - uses: docker/setup-buildx-action@v3
        with:
          install: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: ./src/latest/scripts/init-filesystem
      - id: build
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha,scope=buildkit-latest-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=buildkit-latest-${{ matrix.platform }}
          context: src/${{ github.job }}
          platforms: ${{ matrix.platform }}
          pull: true
          push: true
          outputs: type=image,name=ghcr.io/${{ github.repository }}/${{ github.job }},name-canonical=true,push-by-digest=true,push=true
      - run: |
          mkdir --parent /tmp/digests
          DOCKER_IMAGE_DIGEST=${{ steps.build.outputs.digest }}
          touch /tmp/digests/${DOCKER_IMAGE_DIGEST#sha256:}
      - uses: actions/upload-artifact@v4
        with:
          name: digests-${{ github.job }}-${{ env.DOCKER_IMAGE_TARGET_PLATFORM }}
          path: /tmp/digests/*
          if-no-files-found: error
    runs-on: ubuntu-22.04

  manifest:
    needs:
      - metadata
      - latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-latest-*
          merge-multiple: true
      - uses: docker/setup-buildx-action@v3
      - uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/latest
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          tags: |
            type=raw,value=${{ needs.metadata.outputs.build_commit_sha }}
      - if: ${{ github.ref_name == 'master' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: jq <<< "$DOCKER_METADATA_OUTPUT_JSON"
      - run: |
          docker buildx imagetools create $(jq --compact-output --raw-output '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}/latest@sha256:%s ' *)
        working-directory: /tmp/digests
      - if: ${{ github.ref_name == 'master' }}
        run: |
          docker buildx imagetools create --tag ghcr.io/${{ github.repository }}/latest:${{ github.ref_name }} \
            ghcr.io/${{ github.repository }}/latest:${{ needs.metadata.outputs.build_commit_sha }}
          docker buildx imagetools create --tag ${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}/latest:${{ needs.metadata.outputs.build_commit_sha }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-22.04

  forks:
    needs:
      - metadata
      - manifest
    strategy:
      matrix:
        source: ${{ fromJSON(needs.metadata.outputs.build_forks) }}
        platform: ${{ fromJSON(needs.metadata.outputs.build_platforms) }}
    steps:
      - run: |
          DOCKER_IMAGE_TARGET_PLATFORM=${{ matrix.platform }}
          echo "DOCKER_IMAGE_TARGET_PLATFORM=${DOCKER_IMAGE_TARGET_PLATFORM//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      - uses: docker/setup-buildx-action@v3
        with:
          install: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: ./src/${{ matrix.source }}/scripts/init-filesystem
      - uses: docker/build-push-action@v5
        id: build
        with:
          build-args: |
            BASEIMAGE=ghcr.io/${{ github.repository }}/latest:${{ needs.metadata.outputs.build_commit_sha }}
          cache-from: type=gha,scope=buildkit-${{ matrix.source }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.source }}-${{ matrix.platform }}
          context: src/${{ matrix.source }}
          platforms: ${{ matrix.platform }}
          pull: false
          push: true
          outputs: type=image,name=ghcr.io/${{ github.repository }}/${{ matrix.source }},name-canonical=true,push-by-digest=true,push=true
      - run: |
          mkdir --parent /tmp/digests
          DOCKER_IMAGE_DIGEST=${{ steps.build.outputs.digest }}
          touch /tmp/digests/${DOCKER_IMAGE_DIGEST#sha256:}
      - uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.source }}-${{ env.DOCKER_IMAGE_TARGET_PLATFORM }}
          path: /tmp/digests/*
          if-no-files-found: error
    runs-on: ubuntu-22.04

  manifests:
    needs:
      - metadata
      - forks
    strategy:
      matrix:
        source: ${{ fromJSON(needs.metadata.outputs.build_forks) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.source }}-*
          merge-multiple: true
      - uses: docker/setup-buildx-action@v3
      - uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.source }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          tags: |
            type=raw,value=${{ needs.metadata.outputs.build_commit_sha }}
      - if: ${{ github.ref_name == 'master' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: jq <<< "$DOCKER_METADATA_OUTPUT_JSON"
      - run: |
          docker buildx imagetools create $(jq --compact-output --raw-output '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}/${{ matrix.source }}@sha256:%s ' *)
        working-directory: /tmp/digests
      - if: ${{ github.ref_name == 'master' }}
        run: |
          docker buildx imagetools create --tag ghcr.io/${{ github.repository }}/${{ matrix.source }}:${{ github.ref_name }} \
            ghcr.io/${{ github.repository }}/${{ matrix.source }}:${{ needs.metadata.outputs.build_commit_sha }}
          docker buildx imagetools create --tag ${{ github.repository }}:${{ matrix.source }} \
            ghcr.io/${{ github.repository }}/${{ matrix.source }}:${{ needs.metadata.outputs.build_commit_sha }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-22.04

  scout:
    needs:
      - metadata
      - forks
      - latest
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        source: ${{ fromJSON(needs.metadata.outputs.build_flavours) }}
        platform: ${{ fromJSON(needs.metadata.outputs.build_platforms) }}
    steps:
      - run: |
          DOCKER_IMAGE_TARGET_PLATFORM=${{ matrix.platform }}
          echo "DOCKER_IMAGE_TARGET_PLATFORM=${DOCKER_IMAGE_TARGET_PLATFORM//\//-}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.source }}-${{ env.DOCKER_IMAGE_TARGET_PLATFORM }}
          merge-multiple: true
      - run: |
          ls --all --format verbose $PWD
          DOCKER_IMAGE_REFERENCE=$(printf 'ghcr.io/${{ github.repository }}/${{ matrix.source }}@sha256:%s ' *)
          echo "DOCKER_IMAGE_REFERENCE=${DOCKER_IMAGE_REFERENCE}" >> $GITHUB_ENV
        working-directory: /tmp/digests
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/scout-action@v1
        with:
          command: compare,cves,recommendations
          image: ${{ env.DOCKER_IMAGE_REFERENCE }}
          to: ${{ github.repository }}:${{ matrix.source }}
          platform: ${{ matrix.platform }}
          ignore-unchanged: true
          only-severities: critical,high
          write-comment: true
          keep-previous-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-22.04

  slack:
    needs:
      - manifest
      - manifests
      - scout
    if: ${{ always() }}
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: "#github"
          name: "GitHub Workflow"
    runs-on: ubuntu-22.04
# vim: set expandtab shiftwidth=2 syntax=yaml:
