name: Scan Image

on:
  workflow_run:
    branches:
      - master
      - "workflows/*"
    workflows:
      - Build Image
    types:
      - completed
  workflow_dispatch:
    inputs:
      workflow_run_id:
        type: number
        required: true

jobs:
  metadata:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    steps:
      - id: workflow-run-id
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'workflow_run') {
              console.log('Using manual trigger workflow run ID via context.payload.workflow_run.id');
              return context.payload.workflow_run.id;
            }

            if (context.eventName === 'workflow_dispatch') {
              console.log('Using workflow dispatch run ID via process.env.WORKFLOW_DISPATCH_WORKFLOW_RUN_ID');
              return process.env.WORKFLOW_DISPATCH_WORKFLOW_RUN_ID;
            }

            throw new Error(`Unsupported event trigger ${context.eventName}`);
          result-encoding: string
        env:
          WORKFLOW_DISPATCH_WORKFLOW_RUN_ID: ${{ inputs.workflow_run_id }}
      - id: digests
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: process.env.WORKFLOW_DISPATCH_WORKFLOW_RUN_ID,
            });

            const digests = artifacts.data.artifacts.filter(artifact => artifact.name.startsWith('digests-'));
            return digests.map(digest => digest.name);
          result-encoding: json
        env:
          WORKFLOW_DISPATCH_WORKFLOW_RUN_ID: ${{ steps.workflow-run-id.outputs.result }}
    outputs:
      digests: ${{ steps.digests.outputs.result }}
      workflow-run-id: ${{ steps.workflow-run-id.outputs.result }}
    runs-on: ubuntu-latest
  scount:
    needs:
      - metadata
    strategy:
      matrix:
        digest: ${{ fromJSON(needs.metadata.outputs.digests) }}
    steps:
      - id: flavour
        uses: actions/github-script@v7
        with:
          script: return String(process.env.WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST).split('-').slice(1, -2).join('-')
          result-encoding: string
        env:
          WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST: ${{ matrix.digest }}
      - id: architecture
        uses: actions/github-script@v7
        with:
          script: return String(process.env.WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST).split('-').slice(-2).join('/')
          result-encoding: string
        env:
          WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST: ${{ matrix.digest }}
      - uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: process.env.WORKFLOW_DISPATCH_WORKFLOW_RUN_ID,
              name: process.env.WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST,
            });
            const [artifact] = artifacts.data.artifacts;
            const archive = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
              archive_format: 'zip',
            });
            fs.writeFileSync(process.env.WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST, Buffer.from(archive.data));
            console.log(fs.readdirSync('.'));
        env:
          WORKFLOW_DISPATCH_WORKFLOW_RUN_ID: ${{ needs.metadata.outputs.workflow-run-id }}
          WORKFLOW_DISPATCH_WORKFLOW_ARTIFACT_DIGEST: ${{ matrix.digest }}
      - run: unzip -d /tmp/digests ${{ matrix.digest }}
      - run: |
          DOCKER_IMAGE_FLAVOUR=${{ steps.flavour.outputs.result }}
          echo "DOCKER_IMAGE_FLAVOUR=${DOCKER_IMAGE_FLAVOUR}" >> $GITHUB_ENV
          DOCKER_IMAGE_REFERENCE=$(printf "ghcr.io/${{ github.repository }}/${DOCKER_IMAGE_FLAVOUR}@sha256:%s" *)
          echo "DOCKER_IMAGE_REFERENCE=${DOCKER_IMAGE_REFERENCE}" >> $GITHUB_ENV
        working-directory: /tmp/digests
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.DOCKER_IMAGE_REFERENCE }}
          platform: ${{ steps.architecture.outputs.result }}
          sarif-file: sarif.output.json
          summary: true
      - if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json
          ref: ${{ github.event.workflow_run.head_branch }}
          sha: ${{ github.event.workflow_run.head_sha }}
    runs-on: ubuntu-latest
