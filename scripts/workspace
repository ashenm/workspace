#!/usr/bin/env sh
#
# Mount a directory within a Workspace container
# https://github.com/ashenm/workspace
#
# Ashen Gunaratne
# mail@ashenm.ml
#

set -e

#######################################
# Print usage instructions to STDIN
# Arguments:
#   None
# Returns:
#   None
#######################################
usage() {

cat <<USAGE

Usage: $SELF [OPTIONS] [DIRECTORY]
Mount a directory within a Workspace container

Options:
  -h, --help                Print usage instructions
      --hostname string     Container hostname
      --image               Custom container image (default 'ashenm/workspace')
  -n, --name                Assign a name to the container
      --blank               Avoid all extended customisations
      --no-agent            Avoid ssh-agent socket sharing
      --no-git              Avoid ~/.gitconfig read-only bind mount
      --no-gpg              Avoid ~/.gnupg bind mount
      --no-host             Avoid population of host IP mapping
      --no-mount            Avoid directory mount
      --no-publish          Avoid punishment of container's 8080, 8081 and 8082 ports to the host
      --no-ssh              Avoid ~/.ssh read-only bind mount
      --no-rm               Avoid automatic removal of container on exit

USAGE

}

#######################################
# Print invalid argument details to STDERR
# Arguments:
#   Invalid argument
# Returns:
#   None
#######################################
invalid() {

cat >&2 <<INVALID

$SELF: unrecognized option '$1'
Try '$SELF --help' for more information.

INVALID

}

# script reference
SELF="`basename $0`"

# default runtime configurations
IMAGE="ashenm/workspace"
ARGUMENTS="--interactive --tty"
DIRECTORY="$PWD"

# parse arguments
while [ "$#" -ne 0 ]
do

  case "$1" in

    --blank)
      DANGLE=true
      shift
      ;;

    --no-agent)
      SSH_AUTH_SOCK=
      shift
      ;;

    --no-mount)
      DIRECTORY=
      shift
      ;;

    --no-git)
      GITCONFIG=false
      shift
      ;;

    --no-gpg)
      GNUPGDIR=false
      shift
      ;;

    --no-host)
      IPMAPPING=false
      shift
      ;;

    --no-publish)
      PUBLISHMENT=false
      shift
      ;;

    --no-ssh)
      SSHCONFIG=false
      shift
      ;;

    --no-rm)
      TEMPORARY=false
      shift
      ;;

    --name)
      CONTAINER="${2:?Invalid NAME}"
      shift 2
      ;;

    --hostname)
      DNSNAME="${2:?Invalid HOSTNAME}"
      shift 2
      ;;

    --image)
      IMAGE="${2:?Invalid IMAGE}"
      shift 2
      ;;

    -h|--help)
      usage
      exit 0
      ;;

    -*|--*)
      invalid "$1"
      exit 1
      ;;

    *)
      DIRECTORY="`readlink --canonicalize $1`"
      shift
      ;;

  esac

done

# check for existing workspace containers
DEAD="`docker ps --latest --format "{{.Names}}" --filter "ancestor=$IMAGE"`"

# prompt whether to use existing workspace container
test -n "$DEAD" && \
  read -p "Spawn existing workspace container $DEAD (Y/N): " RESTART

# attach existing container on request
test -n "$DEAD" && test "$RESTART" = "y" -o "$RESTART" = "Y" && \
  exec docker start --attach --interactive $DEAD

# rm
test "$TEMPORARY" != "false" && \
  ARGUMENTS="$ARGUMENTS --rm"

# container name
test -n "$CONTAINER" && \
  ARGUMENTS="$ARGUMENTS --name $CONTAINER"

# container hostname
test -n "$DNSNAME" && \
  ARGUMENTS="$ARGUMENTS --hostname $DNSNAME"

# spawn nullified container on request
test -n "$DANGLE" && \
  exec docker run $ARGUMENTS $IMAGE bash --login

# directory mount
test -n "$DIRECTORY" && \
  ARGUMENTS="$ARGUMENTS --volume $DIRECTORY:/home/ubuntu/workspace/`basename $DIRECTORY`"

# ip mapping
test "$IPMAPPING" != "false" && \
  ARGUMENTS="$ARGUMENTS --add-host docker:`ip addr show docker0 | grep -Po 'inet \K[\d.]+'`"

# ports
test "$PUBLISHMENT" != "false" && \
  ARGUMENTS="$ARGUMENTS --publish 8080:8080 --publish 8081:8081 --publish 8082:8082"

# .gitconfig
test "$GITCONFIG" != "false" && \
  ARGUMENTS="$ARGUMENTS --volume $HOME/.gitconfig:/home/ubuntu/.gitconfig:ro"

# .ssh
test "$SSHCONFIG" != "false" && test -d "$HOME/.ssh" && \
  ARGUMENTS="$ARGUMENTS --volume $HOME/.ssh:/home/ubuntu/.ssh:ro"

# share ssh-agent socket if running
test "$SSHCONFIG" != "false" && test -n "$SSH_AUTH_SOCK" && \
  ARGUMENTS="$ARGUMENTS --volume $SSH_AUTH_SOCK:/run/keyring/ssh:ro"

# .gnupg
test "$GNUPGDIR" != "false" && test -d "$HOME/.gnupg" && \
  ARGUMENTS="$ARGUMENTS --volume $HOME/.gnupg:/home/ubuntu/.gnupg"

# spawn new container
exec docker run $ARGUMENTS $IMAGE
